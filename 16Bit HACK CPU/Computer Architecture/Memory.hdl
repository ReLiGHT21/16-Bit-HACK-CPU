// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//// Replace this comment with your code.
    //first we will need to build a system to detect what address is for what
    //for RAM, the last bit MUST be zero. therefore
    Not(in=address[14], out=isRAM);
    //isRAM will tell us whether it is ram address or not
    //for screen, we need the NEXT 8000-ish addresses, for that, 14th bit must be 1
    //and 13th bit must be zero.
    Not(in=address[13], out=not13);
    And(a=address[14] , b=not13 , out=isSCRN ); 
    //for keyboard, we only require the last bit of address, there 13 and  14 must be 1
    And(a=address[14] , b=address[13] , out=isKBD );

    //now for loading RAM and screen data, we need to get their load values
    And(a=isRAM, b=load, out=loadRAM);
    And(a=isSCRN, b=load, out=loadSCRN);

    //now we will implement the memory
    RAM16K(in=in , load=loadRAM , address=address[0..13] , out=RAMout);
    Screen(in=in , load=loadSCRN , address=address[0..12] , out=SCRNout);
    Keyboard(out=KBDout);

    Mux16(a=RAMout , b=SCRNout , sel=isSCRN , out=out1);
    Mux16(a=out1, b=KBDout, sel=isKBD, out=out);
    

    
    
}